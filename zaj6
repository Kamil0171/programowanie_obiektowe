Zad 1. Napisz statyczną metodę mergeArrays, która przyjmuje dwie tablice liczb całkowitych jako argumenty. Funkcja powinna zwrócić nową listę tablicową, która jest połączeniem obu pierwotnych tablic. Na przykład, dla list tablicowych [1, 2, 3] i [4, 5, 6], funkcja powinna zwrócić [1, 2, 3, 4, 5, 6]. Stwórz przypadek testowy.

import java.util.ArrayList;

public class Main
{
    public static void main(String[] args)
    {
        int tab1[] = {1,2,3};
        int tab2[] = {4,5,6};

        ArrayList<Integer> lista = mergeArrays(tab1, tab2);
        System.out.println(lista);
    }
    public static ArrayList<Integer> mergeArrays(int[] tab1, int[] tab2)
    {
        ArrayList<Integer> lista = new ArrayList<>();

        for(int i = 0; i < tab1.length; i++)
        {
            lista.add(tab1[i]);
        }
        for(int i = 0; i < tab2.length; i++)
        {
            lista.add(tab2[i]);
        }
        return lista;
    }
}

Zad 2. Napisz klasę Student, która ma pola: firstName, lastName i fieldOfStudy. Zdefiniuj w niej dwa konstruktory, jeden przyjmujący wszystkie trzy parametry, a drugi tylko firstName i lastName. Drugi konstruktor powinien wywoływać pierwszy, przekazując mu domyślną wartość fieldOfStudy jako unknown.

public class Student
{
    String firstName;
    String lastName;
    String fieldOfStudy;

    public Student(String firstName, String lastName, String fieldOfStudy)
    {
        this.firstName = firstName;
        this.lastName = lastName;
        this.fieldOfStudy = fieldOfStudy;
    }
    public Student(String firstName, String lastName)
    {
        this(firstName, lastName, "unknown");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Student student = new Student("Kamil", "Amarasekara");
        System.out.println(student.fieldOfStudy);
    }
}

Zad 3. Stwórz klasę bazową o nazwie Vehicle z polami: brand i model. Klasa ta powinna posiadać konstruktor przyjmujący oba te parametry. Następnie stwórz klasę potomną o nazwie Car, która dziedziczy po klasie Vehicle. Klasa Car powinna posiadać dodatkowe pole numberOfDoors. Stwórz konstruktor dla klasy Car, który przyjmuje wszystkie trzy parametry i korzysta z konstruktora klasy bazowej. Stwórz przypadek testowy.

public class Vehicle
{
    String brand;
    String model;
    public Vehicle(String brand, String model)
    {
        this.brand = brand;
        this.model = model;
    }
}
class Car extends Vehicle
{
    int numberOfDoors;
    public Car(String brand, String model, int numberOfDoors)
    {
        super(brand, model);
        this.numberOfDoors = numberOfDoors;
    }
}

Zad 4. Wykonaj poniższe czynności:
Zdefiniuj klasę Book, która posiada następujące pola: title, author i numberOfPages.
Napisz konstruktor, który przyjmuje trzy argumenty i waliduje je przed przypisaniem do odpowiednich pól.
Liczba stron (numberOfPages) nie powinna być ujemna. W przypadku podania wartości ujemnej, ustaw liczbę stron na jedną.
Pola title i author nie powinny być puste ani równać się null. W przypadku podania pustego napisu lub null, ustaw odpowiednio pusty napis.
Dodaj metodę toString(), która zwraca informacje o książce w formacie: "Book: [title] by [author], Pages: [numberOfPages].".
Dodaj metodę equals(), która porównuje dwie książki na podstawie ich pól title, author i numberOfPages

public class Book
{
    public String title;
    public String autor;
    public int number;

    @Override
    public String toString()
    {
        return "Book " + title + "by " + autor + "pages: " + number;
    }

    @Override
    public boolean equals(Object obj)
    {
        if(obj instanceof Book temp)
        {
            if(this.title.equals(temp.title) &&
                this.autor.equals(temp.autor) &&
                this.number == temp.number)
            {
                return false;
            }
            else
            {
                return false;
            }
        }
        return false;
    }
}

Zad 5. Wykonaj kolejno poniższe czynności:
Stwórz klasę bazową Vehicle z metodą drive, która wypisuje “The vehicle is moving.”. Następnie stwórz klasę potomną Car, która nadpisuje metodę drive tak,  by wywoływała oryginalną metodę z klasy bazowej i dodatkowo wypisywała informacje specyficzne dla klasy Car. Użyj słowa kluczowego super, aby wywołać metodę z klasy bazowej.

public class Vehicle
{
    String brand;
    String model;
    public Vehicle(String brand, String model)
    {
        this.brand = brand;
        this.model = model;
    }

    public void drive()
    {
        System.out.println("The vehicle is moving");
    }
}
class Car extends Vehicle
{
    int numberOfDoors;

    public Car(String brand, String model, int numberOfDoors)
    {
        super(brand, model);
        this.numberOfDoors = numberOfDoors;
    }
    @Override
    public void drive()
    {
        super.drive();
        System.out.println("The car is moving");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Vehicle v = new Car("da", "fsd", 123);
        v.drive();
    }
}
