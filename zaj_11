public class Box <T,U> {
    T value;
    U value2;
    public Box(T value, U value2)
    {
        this.value = value;
        this.value2 = value2;
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Box<String, Integer> box = new Box<>("Czesc", 3);
        Box<Integer, String> box2 = new Box<>(5, "Elo");
        Box<Integer, Integer> box3 = new Box<>(5, 16);

        wypisz(4);
        wypisz("Siemanko");
    }

    public static <T> void wypisz(T val)
    {
        System.out.println(val);
    }
}

Zad 1. Napisz generyczną metodę isEqual, która przyjmuje dwa dowolne obiekty tego samego typu i zwraca true, jeśli są one równe, w przeciwnym razie false.

public class Main
{
    public static void main(String[] args)
    {
        String str1 = "Siemka";
        String str2 = "Siema";
        boolean stringsEqual = isEqual(str1, str2);

        System.out.println("Czy stringi sa rowne? " + stringsEqual);

        Integer liczba1 = 42;
        Integer liczba2 = 42;
        boolean liczbyEqual = isEqual(liczba1, liczba2);

        System.out.println("Czy liczby sa rowne? " + liczbyEqual);

        int[] tab1 = {1, 2, 3};
        int[] tab2 = {1, 2, 3};
        boolean tabEqual = isEqual(tab1, tab2);

        System.out.println("Czy tablice sa rowne? " + tabEqual);
    }

    public static <T> boolean isEqual(T obj1, T obj2)
    {
        if (obj1 == null && obj2 == null)
        {
            return true;
        }
        return obj1 != null && obj1.equals(obj2);
    }
}

Zad 2. Stwórz klasę generyczną Triple<T, U, V>, która może przechowywać trzy obiekty różnych typów. Zaimplementuj metody getFirst(), getSecond() i getThird() do pobierania odpowiednio pierwszego, drugiego i trzeciego elementu.

public class Triple<T, U, V>
{
    T first;
    U second;
    V third;

    public Triple(T first, U second, V third)
    {
        this.first = first;
        this.second = second;
        this.third = third;
    }

    public T getFirst()
    {
        return first;
    }

    public U getSecond()
    {
        return second;
    }

    public V getThird()
    {
        return third;
    }

    public static void main(String[] args)
    {
        Triple<String, Integer, Boolean> triple = new Triple<>("Siema", 19, true);

        String pierwszy = triple.getFirst();
        Integer drugi = triple.getSecond();
        Boolean trzeci = triple.getThird();

        System.out.println("Pierwszy element: " + pierwszy);
        System.out.println("Drugi element: " + drugi);
        System.out.println("Trzeci element: " + trzeci);
    }
}

Zad 3. Napisz statyczną metodę generyczną swap, która przyjmuje tablicę dowolnego typu i dwa indeksy, a następnie zamienia miejscami elementy w tej tablicy pod wskazanymi indeksami. Metoda powinna działać dla tablicy każdego typu. Przykładowe wywołanie metody: swap(myArray, 0, 2);, gdzie myArray to tablica typu Integer[] lub dowolnego innego typu. Zabezpiecz metodę tak, aby nie można było jej wywołać z indeksami spoza zakresu tablicy.

import java.util.Arrays;

public class Main
{
    public static void main(String[] args)
    {
        Integer[] intArray = {5, 7, 2, 3, 1};
        Double[] doubleArray = {3.2, 1.87, 123.1, 4.0, 5.5};
        String[] stringArray = {"Jablko", "Gruszka", "Sliwka", "Ananas", "Jagoda"};

        swap(intArray, 0, 2);
        swap(doubleArray, 1, 4);
        swap(stringArray, 3, 0);

        System.out.println("Swap tab1: " + Arrays.toString(intArray));
        System.out.println("Swap tab2: " + Arrays.toString(doubleArray));
        System.out.println("Swap tab3: " + Arrays.toString(stringArray));

        swap(intArray, -1, 5);
    }

    public static <T> void swap(T[] tab, int index1, int index2)
    {
        if (index1 < 0 || index2 < 0 || index1 >= tab.length || index2 >= tab.length)
        {
            return;
        }

        T temp = tab[index1];
        tab[index1] = tab[index2];
        tab[index2] = temp;
    }
}

Zad 4. Napisz statyczną metodę generyczną maxValue, która przyjmuje tablicę elementów typu generycznego T, gdzie T rozszerza Comparable<T>. Metoda powinna zwracać największy element z tablicy. Upewnij się, że metoda nie akceptuje pustej tablicy (o zerowej liczbie elementów). Przetestuj metodę na tablicach zawierających różne typy porównywalnych obiektów, jak Integer, Float, czy String. Stwórz klasę Vehicle z polami model i speed, implementującą generyczny Comparable, i przetestuj metodę maxValue na tablicy obiektów Vehicle.

import java.util.Arrays;

public class Main
{
    public static void main(String[] args)
    {
        Integer[] intTab = {5, 2, 8, 1, 9};
        Float[] floatTab = {2.5f, 7.2f, 4.8f, 1.3f};
        String[] stringTab = {"apple", "banana", "cherry", "date"};
        Vehicle[] vehicleTab =
                {
                new Vehicle("Car", 120),
                new Vehicle("Bike", 25),
                new Vehicle("Truck", 80)
        };

        System.out.println("Max int tab: " + maxValue(intTab));
        System.out.println("Max float tab: " + maxValue(floatTab));
        System.out.println("Max string tab: " + maxValue(stringTab));
        System.out.println("Max speed w vehicle tab: " + maxValue(vehicleTab).getSpeed());
    }

    public static <T extends Comparable<T>> T maxValue(T[] tab)
    {
        if (tab.length == 0
        ) {
            throw new IllegalArgumentException("Tablica nie moze byc pusta");
        }

        T max = tab[0];
        for (T element : tab)
        {
            if (element.compareTo(max) > 0)
            {
                max = element;
            }
        }
        return max;
    }

    static class Vehicle implements Comparable<Vehicle>
    {
        private String model;
        private int speed;

        public Vehicle(String model, int speed)
        {
            this.model = model;
            this.speed = speed;
        }

        public int getSpeed()
        {
            return speed;
        }

        @Override
        public int compareTo(Vehicle other)
        {
            return Integer.compare(this.speed, other.speed);
        }
    }
}

Zad 5. Zdefiniuj klasy Car (Samochód) i ElectricCar (Samochód Elektryczny), gdzie ElectricCar dziedziczy po Car. Napisz statyczną metodę generyczną compareObjects, która przyjmuje dwa argumenty: object1 i object2 typu extends Car. Metoda ma zwracać wartość true, jeśli obiekty są tego samego typu, w przeciwnym wypadku false. Użyj metody getClass() do porównania klas obiektów.

public class Car
{
    private String model;

    public Car(String model)
    {
        this.model = model;
    }

    public String getModel()
    {
        return model;
    }


static class ElectricCar extends Car
{
    public ElectricCar(String model)
    {
        super(model);
    }
}

    public static <T extends Car> boolean compareObjects(T object1, T object2)
    {
        return object1.getClass().equals(object2.getClass());
    }
}

import java.util.Arrays;

public class Main
{
    public static void main(String[] args)
    {
        Car car1 = new Car("Auto benzyna");
        Car car2 = new Car("Auto gaz");
        Car.ElectricCar electricCar = new Car.ElectricCar("Auto elektryczne");

        System.out.println("Czy auto1 i auto2 sa takie same? " + Car.compareObjects(car1, car2));
        System.out.println("Czy auto1 i auto elektryczne sa takie same? " + Car.compareObjects(car1, electricCar));
    }
}

Zad 6. Stwórz klasę generyczną Triple<T>, która przechowuje trzy obiekty tego samego typu. Następnie utwórz dwie klasy: Bird i Eagle, gdzie Eagle dziedziczy po Bird. Potem napisz statyczną metodę generyczną findMin, która przyjmuje Triple<? extends Bird>. Ta metoda powinna zwracać element mniejszy na podstawie kryterium porównania zdefiniowanego przez ciebie.

Zad 7. Stwórz klasę generyczną Pair<T> która przechowuje dwa obiekty tego samego typu. Utwórz dwie klasy: Animal (Zwierzę) i Dog (Pies), gdzie Dog dziedziczy po Animal. Klasa Dog ma posiadać prywatne pole age, które nie posiada klasa Animal. Następnie napisz statyczną metodę generyczną findMinMaxAge, która przyjmuje jako argument tablicę obiektów typu Dog oraz Pair<?super Dog> result. Metoda powinna ma zapisać (jako obiekty typu Dog) najmniejszy i najmniejszy (pod kątem wieku) psa z tablicy w drugim argumencie metody. Zrób to bezpośrednio bez używania interfejsów Comparable czy Comparator.
