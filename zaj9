Zad 1. Załóżmy, że mamy interfejs MusicPlayer z metodami turnOn(), turnOff() i nextTrack(). Stwórz klasę Radio, która będzie implementować ten interfejs. W metodzie turnOn() powinien zostać wydrukowany komunikat “Radio włączone”, w metodzie turnOff() - “Radio wyłączone”, a w nextTrack() - “Zmieniono stację radiową”.

interface MusicPlayer
{
    void turnOn();
    void turnOff();
    void nextTrack();
}

class Radio implements MusicPlayer
{
    @Override
    public void turnOn()
    {
        System.out.println("Radio włączone");
    }

    @Override
    public void turnOff()
    {
        System.out.println("Radio wyłączone");
    }

    @Override
    public void nextTrack()
    {
        System.out.println("Zmieniono stację radiową");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Radio radio = new Radio();

        radio.turnOn();
        radio.nextTrack();
        radio.turnOff();
    }
}

Zad 2. Opracuj interfejs MediaPlayer z trzema abstrakcyjnymi metodami: play(String trackName) zwracającą void, pause() zwracającą void oraz getCurrentTrack() zwracającą String. Stwórz dwie klasy AudioPlayer i VideoPlayer, które implementują ten interfejs. W osobnej klasie MediaPlayerTest sprawdź działanie metod dla obiektów z obu klas.

interface MediaPlayer
{
    void play(String trackName);
    void pause();
    String getCurrentTrack();
}

class AudioPlayer implements MediaPlayer
{
    private String currentTrack;

    @Override
    public void play(String trackName)
    {
        System.out.println("Odtwarzanie audio: " + trackName);
        currentTrack = trackName;
    }

    @Override
    public void pause()
    {
        System.out.println("Zatrzymano odtwarzanie audio");
    }

    @Override
    public String getCurrentTrack()
    {
        return currentTrack;
    }
}

class VideoPlayer implements MediaPlayer
{
    private String currentTrack;

    @Override
    public void play(String trackName)
    {
        System.out.println("Odtwarzanie wideo: " + trackName);
        currentTrack = trackName;
    }

    @Override
    public void pause()
    {
        System.out.println("Zatrzymano odtwarzanie wideo");
    }

    @Override
    public String getCurrentTrack()
    {
        return currentTrack;
    }
}

class MediaPlayerTest
{
    public static void main(String[] args)
    {
        AudioPlayer audioPlayer = new AudioPlayer();
        audioPlayer.play("MAGNOLIA");
        System.out.println("Aktualny utwor: " + audioPlayer.getCurrentTrack());
        audioPlayer.pause();

        System.out.println();

        VideoPlayer videoPlayer = new VideoPlayer();
        videoPlayer.play("Piraci z Karaibow");
        System.out.println("Aktualne wideo: " + videoPlayer.getCurrentTrack());
        videoPlayer.pause();
    }
}


Zad 3. Stwórz interfejs Storage z trzema metodami abstrakcyjnymi: save(String data) zwracającą boolean, delete(String identifier) zwracającą boolean oraz retrieve(String identifier) zwracającą String. Zaprojektuj dwie klasy FileStorage i DatabaseStorage, które implementują ten interfejs. W klasie StorageTest wykonaj testy metod dla obiektów z obu klas.

import com.sun.source.tree.BreakTree;

public interface Storage
{
    boolean save(String data);
    boolean delete(String identifier);
    String retrieve(String identifier);
}

class FileStorage implements Storage
{
    @Override
    public boolean save(String data)
    {
        System.out.println("Zapisano: " + data);
        return true;
    }

    @Override
    public boolean delete(String identifier)
    {
        System.out.println("Usunieto: " + identifier);
        return true;
    }

    @Override
    public String retrieve(String identifier)
    {
        System.out.println("Pobrano dane: " + identifier);
        return "Zawartosc pliku";
    }
}

class DatabaseStorage implements Storage
{
    @Override
    public boolean save(String data)
    {
        System.out.println("Zapisano: " + data);
        return true;
    }

    @Override
    public boolean delete(String identifier)
    {
        System.out.println("Usunieto z bazy danych: " + identifier);
        return true;
    }

    @Override
    public String retrieve(String identifier)
    {
        System.out.println("Pobrano z bazy danych: " + identifier);
        return "Zawartosc bazy";
    }
}

class StorageTest
{
    public static void main(String[] args)
    {
        FileStorage fileStorage = new FileStorage();
        fileStorage.save("Dane do zapisu w pliku");
        System.out.println("Pobrane dane: " + fileStorage.retrieve("1337"));
        fileStorage.delete("1337");

        System.out.println();

        DatabaseStorage databaseStorage = new DatabaseStorage();
        databaseStorage.save("Dane do zapisu w bazie danych");
        System.out.println("Pobrane dane: " + databaseStorage.retrieve("123001"));
        databaseStorage.delete("123001");
    }
}


Zad 4. Wykonaj poniższe czynności:
Utwórz interfejs VehicleManager z dwoma metodami abstrakcyjnymi: startEngine() zwracającą String i getFuelLevel() zwracającą int.
Stwórz klasę Car, implementującą VehicleManager. W metodzie startEngine zwróć “Silnik samochodu uruchomiony”, a w getFuelLevel zwróć wartość 50.
Stwórz klasę Motorcycle, również implementującą VehicleManager. W startEngine zwróć “Silnik motocykla uruchomiony”, a w getFuelLevel zwróć wartość 30.
W klasie VehicleManagerTest stwórz obiekty obu klas i przetestuj ich metody.

Zad 5. Stwórz interfejs o nazwie MyComparator, który będzie zawierał metodę compare(int a, int b): int. Metoda ta powinna zwrócić -1, jeśli a < b, 0 jeśli a == b i 1 jeśli a > b. Następnie stwórz klasę TestMyComparator, która będzie implementować ten interfejs. W klasie tej zaimplementuj metodę compare zgodnie z jej opisem.
