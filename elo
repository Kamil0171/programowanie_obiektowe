
import java.util.Arrays;

public class GenericMaxValue {
    public static void main(String[] args) {
        // Testowanie metody maxValue na różnych typach danych
        Integer[] intArray = {5, 2, 8, 1, 9};
        Float[] floatArray = {2.5f, 7.2f, 4.8f, 1.3f};
        String[] stringArray = {"apple", "banana", "cherry", "date"};
        Vehicle[] vehicleArray = {
                new Vehicle("Car", 120),
                new Vehicle("Bike", 25),
                new Vehicle("Truck", 80)
        };

        // Wyświetlanie wyników
        System.out.println("Max value in intArray: " + maxValue(intArray));
        System.out.println("Max value in floatArray: " + maxValue(floatArray));
        System.out.println("Max value in stringArray: " + maxValue(stringArray));

        // Testowanie na tablicy obiektów Vehicle
        System.out.println("Max speed in vehicleArray: " + maxValue(vehicleArray).getSpeed());
    }

    public static <T extends Comparable<T>> T maxValue(T[] array) {
        if (array.length == 0) {
            throw new IllegalArgumentException("Array must not be empty.");
        }

        T max = array[0];
        for (T element : array) {
            if (element.compareTo(max) > 0) {
                max = element;
            }
        }
        return max;
    }

    // Generyczna klasa Vehicle implementująca Comparable
    static class Vehicle implements Comparable<Vehicle> {
        private String model;
        private int speed;

        public Vehicle(String model, int speed) {
            this.model = model;
            this.speed = speed;
        }

        public int getSpeed() {
            return speed;
        }

        @Override
        public int compareTo(Vehicle other) {
            return Integer.compare(this.speed, other.speed);
        }
    }
}
