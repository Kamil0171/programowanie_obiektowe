
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

class Order {
    private int id;
    private String customerName;
    private LocalDate orderDate;

    public Order(int id, String customerName, LocalDate orderDate) {
        this.id = id;
        this.customerName = customerName;
        this.orderDate = orderDate;
    }

    public int getId() {
        return id;
    }

    public String getCustomerName() {
        return customerName;
    }

    public LocalDate getOrderDate() {
        return orderDate;
    }
}

class OrderComparator implements Comparator<Order> {
    @Override
    public int compare(Order order1, Order order2) {
        // Porównywanie po polu orderDate (od najwcześniejszej do najpóźniejszej daty)
        int compareByDate = order1.getOrderDate().compareTo(order2.getOrderDate());

        // W przypadku równości dat, porównywanie po polu id
        if (compareByDate == 0) {
            return Integer.compare(order1.getId(), order2.getId());
        }

        return compareByDate;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Order> orders = Arrays.asList(
                new Order(1, "Customer1", LocalDate.of(2022, 1, 15)),
                new Order(2, "Customer2", LocalDate.of(2021, 5, 20)),
                new Order(3, "Customer3", LocalDate.of(2022, 3, 10)),
                new Order(4, "Customer4", LocalDate.of(2021, 8, 5)),
                new Order(5, "Customer5", LocalDate.of(2022, 2, 28))
        );

        // Sortowanie listy orders z użyciem interfejsu Comparator
        orders.sort(new OrderComparator());

        // Wyświetlenie posortowanej listy
        for (Order order : orders) {
            System.out.println("ID: " + order.getId() + ", Customer: " + order.getCustomerName() +
                    ", Order Date: " + order.getOrderDate());
        }
    }
}
