public class Pair<T> {
    private T first;
    private T second;

    public Pair(T first, T second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public T getSecond() {
        return second;
    }

    public void setFirst(T first) {
        this.first = first;
    }

    public void setSecond(T second) {
        this.second = second;
    }

    public static class Animal {
        // Base class for animals
    }

    public static class Dog extends Animal {
        private int age;

        public Dog(int age) {
            this.age = age;
        }

        public int getAge() {
            return age;
        }
    }

    public static <T extends Dog> void findMinMaxAge(T[] dogs, Pair<? super T> result) {
        if (dogs.length == 0) {
            return; // Handle empty array case
        }

        T minAgeDog = dogs[0];
        T maxAgeDog = dogs[0];

        for (T dog : dogs) {
            if (dog.getAge() < minAgeDog.getAge()) {
                minAgeDog = dog;
            }
            if (dog.getAge() > maxAgeDog.getAge()) {
                maxAgeDog = dog;
            }
        }

        result.setFirst(minAgeDog);
        result.setSecond(maxAgeDog);
    }

    public static void main(String[] args) {
        Dog[] dogs = {
                new Dog(3),
                new Dog(5),
                new Dog(2),
                new Dog(7)
        };

        Pair<Animal> result = new Pair<>(null, null);

        findMinMaxAge(dogs, result);

        System.out.println("Min Age Dog: " + ((Dog) result.getFirst()).getAge());
        System.out.println("Max Age Dog: " + ((Dog) result.getSecond()).getAge());
    }
}
