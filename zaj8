import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Osoba implements Comparable<Osoba>, Cloneable
{
    String name;
    double height;
    int age;

    public Osoba(String name, double height, int age)
    {
        this.name = name;
        this.height = height;
        this.age = age;
    }

    public Osoba(double height)
    {
        this.height = height;
    }

    public Osoba(int age)
    {
        this.age = age;
    }

    public Osoba(double height, int age)
    {
        this.height = height;
        this.age = age;
    }

    @Override
    public String toString()
    {
        return "[" + height + " " + age + "]";
    }

    public static void main(String[] args)
    {
        ArrayList<Osoba> osobaList = new ArrayList<>();

        osobaList.add(new Osoba(156.0, 15));
        osobaList.add(new Osoba(158.0, 18));
        osobaList.add(new Osoba(156.0, 24));
        osobaList.add(new Osoba(176.0, 18));

        System.out.println(osobaList);

        Collections.sort(osobaList, new OsobaHeightComparator());

        System.out.println(osobaList);

        ArrayList<Osoba> osobaList2 = new ArrayList<>();

        osobaList2.add(new Osoba(156.0, 15));
        osobaList2.add(new Osoba(158.0, 18));
        osobaList2.add(new Osoba(156.0, 24));
        osobaList2.add(new Osoba(176.0, 18));

        Collections.sort(osobaList2, new OsobaAgeComparator().reversed());

        System.out.println(osobaList2);
    }

    @Override
    public int compareTo(Osoba o)
    {
        //return Double.compare(o.height, this.height);
        //return (int) Math.signum(o.height - this.height);
        if(Double.compare(o.height, this.height) == 0)
        {
            return Integer.compare(o.age, this.age);
        }
        return Double.compare(o.height, this.height);
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }
}

class OsobaHeightComparator implements Comparator<Osoba>
{
    @Override
    public int compare(Osoba o1, Osoba o2)
    {
        return Double.compare(o2.height, o1.height);
    }
}

class OsobaAgeComparator implements Comparator<Osoba>
{
    @Override
    public int compare(Osoba o1, Osoba o2)
    {
        return Integer.compare(o2.age, o1.age);
    }
}

public class Main
{
    public static void main(String[] args) throws CloneNotSupportedException
    {
        Osoba o1 = new Osoba("Stefan", 182, 21);
        Osoba o2 = (Osoba) o1.clone();

        System.out.println(o1 + " " + o2);
        o2.age = 95;
        System.out.println(o1 + " " + o2);
    }
}

=====================================================================================================

Zad 1. Napisz klasę Ksiazka, która zawiera pola: tytul (typu String), liczbaStron (typu int) i dataWydania (typu LocalDate). Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Ksiazka były sortowane malejąco według liczby stron. Stwórz tablicę 4 obiektów klasy Ksiazka i posortuj ją według sprecyzowanego kryterium.

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Comparator;

public class Ksiazka implements Comparable<Ksiazka>
{
    private String tytul;
    private int liczbaStron;
    private LocalDate dataWydania;

    public Ksiazka(String tytul, int liczbaStron, LocalDate dataWydania)
    {
        this.tytul = tytul;
        this.liczbaStron = liczbaStron;
        this.dataWydania = dataWydania;
    }

    @Override
    public int compareTo(Ksiazka other)
    {
        return Integer.compare(other.liczbaStron, this.liczbaStron);
    }

    public static void main(String[] args)
    {
        Ksiazka[] ksiazki =
                {
                new Ksiazka("Książka1", 200, LocalDate.of(2020, 1, 1)),
                new Ksiazka("Książka2", 150, LocalDate.of(2019, 5, 15)),
                new Ksiazka("Książka3", 300, LocalDate.of(2022, 8, 20)),
                new Ksiazka("Książka4", 180, LocalDate.of(2021, 3, 10))
        };

        Arrays.sort(ksiazki);

        for (Ksiazka ksiazka : ksiazki)
        {
            System.out.println(ksiazka.tytul + " - " + ksiazka.liczbaStron + " stron");
        }
    }
}

Zad 2. Napisz klasę Samochod, która zawiera pola: marka (typu String), przebieg (typu int) i rokProdukcji (typu int). Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Samochod były sortowane rosnąco według przebiegu. Stwórz tablicę 4 obiektów klasy Samochod i posortuj ją według sprecyzowanego kryterium.

import java.util.Arrays;

public class Samochod implements Comparable<Samochod>
{
    private String marka;
    private int przebieg;
    private int rokProdukcji;

    public Samochod(String marka, int przebieg, int rokProdukcji)
    {
        this.marka = marka;
        this.przebieg = przebieg;
        this.rokProdukcji = rokProdukcji;
    }

    @Override
    public int compareTo(Samochod other)
    {
        return Integer.compare(this.przebieg, other.przebieg);
    }

    public static void main(String[] args)
    {
        Samochod[] samochody = {
                new Samochod("Toyota", 50000, 2018),
                new Samochod("Ford", 70000, 2019),
                new Samochod("Volkswagen", 60000, 2020),
                new Samochod("BMW", 45000, 2017)
        };

        Arrays.sort(samochody);

        for (Samochod samochod : samochody)
        {
            System.out.println(samochod.marka + " - Przebieg: " + samochod.przebieg + " km");
        }
    }
}

Zad 3. Napisz klasę Zamowienie, która zawiera pola: nazwaProduktu (typu String), ilosc (typu int) i cenaJednostkowa (typu double). Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Zamowienie były sortowane według jednego kryterium: malejąco według ceny jednostkowej, a przy równości sortowane były rosnąco według ilości. Stwórz listę tablicową 4 obiektów klasy Zamowienie i posortuj ją według sprecyzowanego kryterium.

import java.util.Arrays;
import java.util.List;

public class Zamowienie implements Comparable<Zamowienie>
{
    private String nazwaProduktu;
    private int ilosc;
    private double cenaJednostkowa;

    public Zamowienie(String nazwaProduktu, int ilosc, double cenaJednostkowa)
    {
        this.nazwaProduktu = nazwaProduktu;
        this.ilosc = ilosc;
        this.cenaJednostkowa = cenaJednostkowa;
    }

    @Override
    public int compareTo(Zamowienie other)
    {
        int compareByPrice = Double.compare(other.cenaJednostkowa, this.cenaJednostkowa);

        if (compareByPrice == 0)
        {
            return Integer.compare(this.ilosc, other.ilosc);
        }
        return compareByPrice;
    }

    public static void main(String[] args)
    {
        List<Zamowienie> zamowienia = Arrays.asList(
                new Zamowienie("Produkt1", 5, 20.0),
                new Zamowienie("Produkt2", 3, 15.0),
                new Zamowienie("Produkt3", 8, 20.0),
                new Zamowienie("Produkt4", 10, 18.0)
        );

        zamowienia.sort(null);

        for (Zamowienie zamowienie : zamowienia)
        {
            System.out.println(zamowienie.nazwaProduktu + " - Cena jednostkowa: " + zamowienie.cenaJednostkowa +
                    ", Ilość: " + zamowienie.ilosc);
        }
    }
}

Zad 4. Napisz klasę Order z polami id (typu int), customerName (typu String) oraz orderDate (typu LocalDate). Stwórz nową klasę i zaimplementuj w niej interfejs Comparator do porównywania obiektów po polu orderDate (od najwcześniejszej do najpóźniejszej daty), a w przypadku równości po polu id. Stwórz listę 5 obiektów klasy Order i posortuj ją zgodnie z opisanym kryterium.

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

class Order
{
    private int id;
    private String customerName;
    private LocalDate orderDate;

    public Order(int id, String customerName, LocalDate orderDate)
    {
        this.id = id;
        this.customerName = customerName;
        this.orderDate = orderDate;
    }

    public int getId()
    {
        return id;
    }

    public String getCustomerName()
    {
        return customerName;
    }

    public LocalDate getOrderDate()
    {
        return orderDate;
    }
}

class Main1
{
    public static void main(String[] args)
    {
        List<Order> orders = Arrays.asList
                (
                new Order(1, "Customer1", LocalDate.of(2022, 1, 15)),
                new Order(2, "Customer2", LocalDate.of(2021, 5, 20)),
                new Order(3, "Customer3", LocalDate.of(2022, 3, 10)),
                new Order(4, "Customer4", LocalDate.of(2021, 8, 5)),
                new Order(5, "Customer5", LocalDate.of(2022, 2, 28))
        );

        orders.sort
                (
                Comparator.comparing(Order::getOrderDate)
                        .thenComparing(Order::getId)
        );

        for (Order order : orders)
        {
            System.out.println("ID: " + order.getId() + ", Customer: " + order.getCustomerName() +
                    ", Order Date: " + order.getOrderDate());
        }
    }
}

Zad 5. Napisz klasę Song z polami title (typu String), artist (typu String) oraz duration (typu int). Stwórz nową klasę i zaimplementuj w niej interfejs Comparator do porównywania obiektów po polu duration (od najkrótszej do najdłuższej piosenki), a w przypadku równości po polu title. Stwórz tablicę 5 obiektów klasy Song i posortuj ją zgodnie z opisanym kryterium.

import java.util.Arrays;
import java.util.Comparator;

class Song
{
    private String title;
    private String artist;
    private int duration;

    public Song(String title, String artist, int duration)
    {
        this.title = title;
        this.artist = artist;
        this.duration = duration;
    }

    public String getTitle()
    {
        return title;
    }

    public String getArtist()
    {
        return artist;
    }

    public int getDuration()
    {
        return duration;
    }
}

class Main2
{
    public static void main(String[] args)
    {
        Song[] songs =
                {
                new Song("Song1", "Artist1", 180),
                new Song("Song2", "Artist2", 240),
                new Song("Song3", "Artist3", 200),
                new Song("Song4", "Artist4", 180),
                new Song("Song5", "Artist5", 210)
        };

        Arrays.sort
                (songs, Comparator
                .comparing(Song::getDuration)
                .thenComparing(Song::getTitle)
        );

        for (Song song : songs)
        {
            System.out.println("Title: " + song.getTitle() + ", Artist: " + song.getArtist() +
                    ", Duration: " + song.getDuration() + " seconds");
        }
    }
}

Zad 6. Napisz klasę Student z polami id (typu int), name (typu String) oraz averageGrade (typu double). Zaimplementuj dwie klasy implementujące generyczny interfejs Comparator: AverageGradeComparator do porównywania obiektów po polu averageGrade (od najwyższej do najniższej średniej ocen) oraz IdComparator do porównywania obiektów po polu id (od najniższego do najwyższego identyfikatora). Stwórz listę 5 obiektów klasy Student i posortuj ją zgodnie z oboma kryteriami (najpierw po średniej ocen, a następnie po identyfikatorze).

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

class Student
{
    private int id;
    private String name;
    private double averageGrade;

    public Student(int id, String name, double averageGrade)
    {
        this.id = id;
        this.name = name;
        this.averageGrade = averageGrade;
    }

    public int getId()
    {
        return id;
    }

    public String getName()
    {
        return name;
    }

    public double getAverageGrade()
    {
        return averageGrade;
    }
}

class AverageGradeComparator implements Comparator<Student>
{
    @Override
    public int compare(Student student1, Student student2)
    {
        return Double.compare(student2.getAverageGrade(), student1.getAverageGrade());
    }
}

class IdComparator implements Comparator<Student>
{
    @Override
    public int compare(Student student1, Student student2)
    {
        return Integer.compare(student1.getId(), student2.getId());
    }
}

class Main3
{
    public static void main(String[] args)
    {
        List<Student> students = Arrays.asList
                (
                new Student(1, "Student1", 4.5),
                new Student(2, "Student2", 3.8),
                new Student(3, "Student3", 4.2),
                new Student(4, "Student4", 4.0),
                new Student(5, "Student5", 4.8)
        );

        students.sort(new AverageGradeComparator().thenComparing(new IdComparator()));

        for (Student student : students)
        {
            System.out.println("ID: " + student.getId() + ", Name: " + student.getName() +
                    ", Average Grade: " + student.getAverageGrade());
        }
    }
}

Zad 7. Napisz klasę Athlete z dwoma polami: name (String) i lapTimes (lista tablicowa zmiennych typu int, reprezentująca czas w sekundach potrzebny na przebiegnięcie okrążenia podczas różnych prób). Zaimplementuj interfejs Cloneable i nadpisz metodę clone(), aby móc klonować obiekty tej klasy. W metodzie main() utwórz obiekt Athlete, sklonuj go, a następnie zmień czas na pozycji 3 oryginalnego sportowca. Wyświetl czasy obu sportowców, aby zobaczyć, czy są niezależne.
