import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Osoba implements Comparable<Osoba>, Cloneable
{
    String name;
    double height;
    int age;

    public Osoba(String name, double height, int age)
    {
        this.name = name;
        this.height = height;
        this.age = age;
    }

    public Osoba(double height)
    {
        this.height = height;
    }

    public Osoba(int age)
    {
        this.age = age;
    }

    public Osoba(double height, int age)
    {
        this.height = height;
        this.age = age;
    }

    @Override
    public String toString()
    {
        return "[" + height + " " + age + "]";
    }

    public static void main(String[] args)
    {
        ArrayList<Osoba> osobaList = new ArrayList<>();

        osobaList.add(new Osoba(156.0, 15));
        osobaList.add(new Osoba(158.0, 18));
        osobaList.add(new Osoba(156.0, 24));
        osobaList.add(new Osoba(176.0, 18));

        System.out.println(osobaList);

        Collections.sort(osobaList, new OsobaHeightComparator());

        System.out.println(osobaList);

        ArrayList<Osoba> osobaList2 = new ArrayList<>();

        osobaList2.add(new Osoba(156.0, 15));
        osobaList2.add(new Osoba(158.0, 18));
        osobaList2.add(new Osoba(156.0, 24));
        osobaList2.add(new Osoba(176.0, 18));

        Collections.sort(osobaList2, new OsobaAgeComparator().reversed());

        System.out.println(osobaList2);
    }

    @Override
    public int compareTo(Osoba o)
    {
        //return Double.compare(o.height, this.height);
        //return (int) Math.signum(o.height - this.height);
        if(Double.compare(o.height, this.height) == 0)
        {
            return Integer.compare(o.age, this.age);
        }
        return Double.compare(o.height, this.height);
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }
}

class OsobaHeightComparator implements Comparator<Osoba>
{
    @Override
    public int compare(Osoba o1, Osoba o2)
    {
        return Double.compare(o2.height, o1.height);
    }
}

class OsobaAgeComparator implements Comparator<Osoba>
{
    @Override
    public int compare(Osoba o1, Osoba o2)
    {
        return Integer.compare(o2.age, o1.age);
    }
}

public class Main
{
    public static void main(String[] args) throws CloneNotSupportedException
    {
        Osoba o1 = new Osoba("Stefan", 182, 21);
        Osoba o2 = (Osoba) o1.clone();

        System.out.println(o1 + " " + o2);
        o2.age = 95;
        System.out.println(o1 + " " + o2);
    }
}

=====================================================================================================

Zad 1. Napisz klasę Ksiazka, która zawiera pola: tytul (typu String), liczbaStron (typu int) i dataWydania (typu LocalDate). Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Ksiazka były sortowane malejąco według liczby stron. Stwórz tablicę 4 obiektów klasy Ksiazka i posortuj ją według sprecyzowanego kryterium.

Zad 2. Napisz klasę Samochod, która zawiera pola: marka (typu String), przebieg (typu int) i rokProdukcji (typu int). Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Samochod były sortowane rosnąco według przebiegu. Stwórz tablicę 4 obiektów klasy Samochod i posortuj ją według sprecyzowanego kryterium.

Zad 3. Napisz klasę Zamowienie, która zawiera pola: nazwaProduktu (typu String), ilosc (typu int) i cenaJednostkowa (typu double). Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Zamowienie były sortowane według jednego kryterium: malejąco według ceny jednostkowej, a przy równości sortowane były rosnąco według ilości. Stwórz listę tablicową 4 obiektów klasy Zamowienie i posortuj ją według sprecyzowanego kryterium.

