Zad 1. Napisz klasę Ksiazka, która będzie zawierać trzy pola: tytul, autor, rokWydania. Następnie zaimplementuj dwa konstruktory - jeden domyślny, który nie przyjmuje żadnych argumentów, i drugi, który przyjmuje trzy argumenty odpowiadające polom klasy. W przypadku drugiego konstruktora, nazwy parametrów muszą być takie same jak nazwy pól. Sprawdź czy jesteś w stanie prawidłowo przypisać wartości do pól klasy używając słowa kluczowego this.

public class Ksiazka
{
    public String tytul;
    public String autor;
    public int rokWydania;

    public Ksiazka()
    {
        tytul = "default";
        autor = "default";
        rokWydania = 2023;
    }

    public Ksiazka(String tytul, String autor, int rokWydania)
    {
        this.autor = autor;
        this.tytul = tytul;
        this.rokWydania = rokWydania;
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Ksiazka k1 = new Ksiazka();
        System.out.println(k1.rokWydania);

        Ksiazka k2 = new Ksiazka("Ostatnie zyczenie", "Andrzej Sapkowski", 1993);
        System.out.println(k2.autor);
    }
}

Zad 2. Stwórz klasę Samochod, która będzie zawierać trzy pola: marka, model, rokProdukcji. Zaimplementuj trzy konstruktory - pierwszy domyślny, drugi przyjmujący dwa argumenty (marka i model), trzeci przyjmujący trzy argumenty (marka, model, rokProdukcji). W przypadku drugiego i trzeciego konstruktora, nazwy parametrów muszą być takie same jak nazwy pól. Wykorzystaj słowo kluczowe this do rozróżnienia pól klasy od parametrów.

Zad 3. Napisz klasę Osoba, która będzie miała pola: imie, nazwisko i wiek. Zdefiniuj w niej dwa konstruktory, jeden przyjmujący wszystkie trzy parametry, a drugi tylko imię i nazwisko. Drugi konstruktor powinien wywołać pierwszy, przekazując mu domyślną wartość wieku jako 0.

Zad 4. Zaprojektuj klasę Kwadrat, która posiada pole bok oraz konstruktor, który umożliwia ustawienie wartości tego pola. Następnie napisz drugi konstruktor, który nie przyjmuje żadnych argumentów, a jedynie wywołuje pierwszy konstruktor z wartością domyślną 1

Zad 5. Napisz klasę Student, która ma pola: imie, nazwisko i kierunekStudiow. Zdefiniuj w niej dwa konstruktory, jeden przyjmujący wszystkie trzy parametry, a drugi tylko imię i nazwisko. Drugi konstruktor powinien wywoływać pierwszy, przekazując mu domyślną wartość kierunku studiów jako nieznany

public class Student
{
    private String imie;
    private String nazwisko;
    private String kierunekStudiow;
    public Student(String imie, String nazwisko, String kierunekStudiow)
    {
        this.imie = imie;
        this.nazwisko = nazwisko;
        this.kierunekStudiow = kierunekStudiow;
    }
    public Student(String imie, String nazwisko)
    {
        this(imie, nazwisko, "nieznany");
    }
    public String Info()
    {
        return "Imie: "+imie+", Nazwisko: "+nazwisko+", Kierunek studiow: "+kierunekStudiow;
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Student s1 = new Student("Michal", "Baron", "Informatyka");
        System.out.println(s1.Info());
        Student s2 = new Student("Maja", "Stasko");
        System.out.println(s2.Info());
    }
}

Zad 6. Stwórz klasę Osoba. Klasa powinna zawierać pole imienne oraz statyczne pole licznik. Zadaniem jest zwiększanie wartości licznik za każdym razem, gdy tworzona jest nowa instancja klasy Osoba. Dodaj metodę, która zwróci wartość licznik. Stwórz przypadek testowy.

public class Osoba
{
    private String imie;
    private static int licznik = 0;
    public Osoba(String imie)
    {
        this.imie = imie;
        licznik++;
    }
    public static int pobierzLicznik()
    {
        return licznik;
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Osoba o1 = new Osoba("Jan");
        Osoba o2 = new Osoba("Anna");
        Osoba o3 = new Osoba("Marek");
        System.out.println("Liczba utworzonych instancji Osoba: " + Osoba.pobierzLicznik());
    }
}
